
import { GoogleGenAI, Type } from '@google/genai';
import { Case } from '../types';

const API_KEY = process.env.API_KEY;
if (!API_KEY) {
  console.warn("API_KEY environment variable not set. AI features will not work.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY, vertexai: true });

const callGeminiWithRetry = async (request: any) => {
    if (!API_KEY) {
        throw new Error("A chave da API do Google n√£o est√° configurada.");
    }
    try {
        const response = await ai.models.generateContent(request);
        return response.text;
    } catch (error) {
        console.error("Error calling Gemini API:", error);
        throw new Error("Falha na comunica√ß√£o com a IA. Verifique a configura√ß√£o da API e tente novamente.");
    }
};

export const generateCaseSummary = async (caseData: Case, clientName: string): Promise<string> => {
  const prompt = `
    Aja como um assistente jur√≠dico especialista em direito previdenci√°rio.
    Analise os dados do caso a seguir e gere um resumo claro e conciso em portugu√™s.
    O resumo deve ser formatado em markdown e incluir:
    1.  **Identifica√ß√£o do Caso**: Cliente e tipo de benef√≠cio.
    2.  **Status Atual**: Qual a situa√ß√£o presente do caso.
    3.  **Hist√≥rico Relevante**: Um breve resumo das notas e dos acontecimentos.
    4.  **Pr√≥ximos Passos Sugeridos**: Com base no status e nas notas, o que deve ser feito a seguir.

    **Dados do Caso:**
    - **Cliente:** ${clientName}
    - **N√∫mero do Processo:** ${caseData.caseNumber}
    - **Tipo de Benef√≠cio:** ${caseData.benefitType}
    - **Status Atual:** ${caseData.status}
    - **Data de In√≠cio:** ${new Date(caseData.startDate).toLocaleDateString('pt-BR')}
    - **Notas:** ${caseData.notes}
  `;
  return callGeminiWithRetry({
    model: 'gemini-2.5-flash',
    contents: { role: 'user', parts: [{ text: prompt }] },
    config: { temperature: 0.5 }
  });
};

export const analyzeDocumentText = async (documentText: string): Promise<string> => {
    const prompt = `
    Aja como um assistente jur√≠dico altamente qualificado. Analise o texto do documento fornecido e retorne uma an√°lise estruturada em markdown.
    A an√°lise deve conter as seguintes se√ß√µes:

    ### üìù Resumo do Documento
    Um resumo conciso do prop√≥sito e conte√∫do principal do documento.

    ### üîë Informa√ß√µes Chave Extra√≠das
    Liste as entidades e informa√ß√µes mais importantes encontradas, como:
    - **Nomes:** (Liste os nomes de pessoas ou institui√ß√µes)
    - **Datas:** (Liste as datas relevantes)
    - **Valores:** (Liste quaisquer valores monet√°rios ou num√©ricos importantes)
    - **Locais:** (Liste cidades, estados ou endere√ßos mencionados)

    ### üìÑ Classifica√ß√£o Sugerida
    Sugira um tipo para este documento (ex: Laudo M√©dico, Peti√ß√£o Inicial, Comprovante de Resid√™ncia, Contrato, Notifica√ß√£o Extrajudicial, etc.).

    ---
    **TEXTO PARA AN√ÅLISE:**
    """
    ${documentText}
    """
    `;
    return callGeminiWithRetry({
        model: 'gemini-2.5-flash',
        contents: { role: 'user', parts: [{ text: prompt }] },
        config: { temperature: 0.3 }
    });
};

const clientInfoSchema = {
    type: Type.OBJECT,
    properties: {
        name: { type: Type.STRING, description: "Nome completo da pessoa." },
        motherName: { type: Type.STRING, description: "Nome da m√£e (filia√ß√£o)." },
        fatherName: { type: Type.STRING, description: "Nome do pai (filia√ß√£o)." },
        cpf: { type: Type.STRING, description: "N√∫mero do CPF, formatado ou n√£o." },
        rg: { type: Type.STRING, description: "N√∫mero do RG ou da Matr√≠cula da Certid√£o de Nascimento." },
        rgIssuer: { type: Type.STRING, description: "√ìrg√£o emissor do documento de identidade (ex: SSP, DETRAN)." },
        rgIssuerUF: { type: Type.STRING, description: "UF do √≥rg√£o emissor (ex: SP, RJ)." },
        dataEmissao: { type: Type.STRING, description: "Data de emiss√£o do documento no formato AAAA-MM-DD." },
        dateOfBirth: { type: Type.STRING, description: "Data de nascimento no formato AAAA-MM-DD." },
        nacionalidade: { type: Type.STRING, description: "Nacionalidade (ex: Brasileiro, Portuguesa)."},
        naturalidade: { type: Type.STRING, description: "Cidade e estado de nascimento (ex: S√£o Paulo/SP)." },
        estadoCivil: { type: Type.STRING, description: "Estado civil (Solteiro(a), Casado(a), etc.)." },
        profissao: { type: Type.STRING, description: "Profiss√£o da pessoa." },
        email: { type: Type.STRING, description: "Endere√ßo de e-mail." },
        phone: { type: Type.STRING, description: "N√∫mero de telefone." },
        cep: { type: Type.STRING, description: "CEP (C√≥digo de Endere√ßamento Postal)." },
        street: { type: Type.STRING, description: "Nome da rua/logradouro." },
        number: { type: Type.STRING, description: "N√∫mero do im√≥vel." },
        complement: { type: Type.STRING, description: "Complemento do endere√ßo (apto, bloco, etc.)." },
        neighborhood: { type: Type.STRING, description: "Bairro." },
        city: { type: Type.STRING, description: "Cidade." },
        state: { type: Type.STRING, description: "Sigla do estado (UF)." },
    },
};

const clientInfoExtractionPrompt = `
    Analise o texto ou a imagem a seguir, que pode ser um documento de identifica√ß√£o (RG, CNH), Certid√£o de Nascimento, Certid√£o de Casamento, comprovante de endere√ßo ou cadastro.
    Extraia as informa√ß√µes da pessoa e retorne-as estritamente como um objeto JSON.
    Para Certid√µes de Nascimento, o campo 'rg' deve ser preenchido com o n√∫mero da Matr√≠cula.
    Se for um RG, extraia o n√∫mero, √≥rg√£o emissor (rgIssuer) e UF do √≥rg√£o emissor (rgIssuerUF).
    Os campos a serem extra√≠dos s√£o: name, motherName, fatherName, cpf, rg, rgIssuer, rgIssuerUF, dataEmissao (formato AAAA-MM-DD), dateOfBirth (formato AAAA-MM-DD), nacionalidade, naturalidade, estadoCivil, profissao, email, phone, e o endere√ßo completo separado em: cep, street, number, complement, neighborhood, city, state.
    Se uma informa√ß√£o n√£o for encontrada, retorne uma string vazia para o campo correspondente.
`;

export const extractClientInfoFromDocument = async (documentText: string): Promise<string> => {
    const prompt = `${clientInfoExtractionPrompt}\n\nTexto do documento:\n"""\n${documentText}\n"""`;
    return callGeminiWithRetry({
        model: 'gemini-2.5-flash',
        contents: { role: 'user', parts: [{ text: prompt }] },
        config: {
            responseMimeType: 'application/json',
            responseSchema: clientInfoSchema,
        },
    });
};

export const extractClientInfoFromImage = async (base64ImageData: string, mimeType: string): Promise<string> => {
    const imagePart = { inlineData: { data: base64ImageData, mimeType: mimeType } };
    const textPart = { text: clientInfoExtractionPrompt };

    return callGeminiWithRetry({
        model: 'gemini-2.5-flash',
        contents: { role: 'user', parts: [imagePart, textPart] },
        config: {
            responseMimeType: 'application/json',
            responseSchema: clientInfoSchema,
        },
    });
};

export const suggestTasksFromNotes = async (notes: string): Promise<string> => {
    const prompt = `
    Aja como um paralegal s√™nior especialista em direito previdenci√°rio. Analise as notas a seguir e identifique a√ß√µes concretas que precisam ser tomadas.
    Retorne uma lista de tarefas sugeridas em formato JSON. Cada tarefa deve ter uma 'description' clara e acion√°vel, um 'dueDate' (data de vencimento) em formato AAAA-MM-DD se um prazo for mencionado, e um 'reasoning' (justificativa) explicando por que a tarefa √© necess√°ria.
    Se nenhum prazo for mencionado, n√£o inclua o campo 'dueDate'.
    Se nenhuma tarefa for identificada, retorne uma lista vazia.

    Exemplo de nota: "Cliente informou que o INSS emitiu uma carta de exig√™ncia para apresentar laudo m√©dico atualizado em 30 dias."
    Exemplo de sa√≠da:
    [
        {
            "description": "Contatar cliente para solicitar novo laudo m√©dico",
            "reasoning": "O INSS emitiu uma exig√™ncia que precisa ser cumprida."
        },
        {
            "description": "Protocolar laudo m√©dico no Meu INSS",
            "dueDate": "${new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}",
            "reasoning": "Cumprir o prazo de 30 dias da exig√™ncia do INSS."
        }
    ]

    Notas para an√°lise:
    """
    ${notes}
    """
    `;

    const schema = {
        type: Type.ARRAY,
        items: {
            type: Type.OBJECT,
            properties: {
                description: { type: Type.STRING },
                dueDate: { type: Type.STRING, nullable: true },
                reasoning: { type: Type.STRING },
            },
            required: ['description', 'reasoning'],
        }
    };

    return callGeminiWithRetry({
        model: 'gemini-2.5-flash',
        contents: { role: 'user', parts: [{ text: prompt }] },
        config: {
            responseMimeType: 'application/json',
            responseSchema: schema,
        },
    });
};
